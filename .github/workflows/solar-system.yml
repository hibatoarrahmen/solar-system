name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'
env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{vars.MONGO_USERNAME}}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:
    code-analysis:
      name: SonarCloud
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v3
          with:
            fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
        - name: SonarCloud Scan
          uses: SonarSource/sonarcloud-github-action@master
          env:
            GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}  # Needed to get PR information, if any
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    unit-testing:
        name: Unit Testing
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            ports:
              - 27017:27017
        env:
          MONGO_URI: 'mongodb://localhost:27017/superData'
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password

        strategy:
          matrix:
            nodejs_version: [18, 19, 20]
            operating_system: [ubuntu-latest]
     

        runs-on: ${{matrix.operating_system}}
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version
          uses: actions/setup-node@v3
          with:
            node-version: ${{matrix.nodejs_version}}
        - name: Cache npm dependencies
          uses: actions/cache@v3
          with:
            path: node_modules
            key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

        - name: Install Dependencies
          run: npm install
    
        - name: Unit Testing
          id: nodejs-unit-testing-step
          run: npm test
        - name: Archive Test Result
          if: always()
          uses: actions/upload-artifact@v3
          with:
            name: Mocha-Test-Result
            path: test-results.xml
    
    code-coverage:
      name: Code Coverage
      container:
        image: node:18
      services:
        mongo-db:
          image: siddharth67/mongo-db:non-prod
          ports:
            - 27017:27017
      env:
          MONGO_URI: 'mongodb://localhost:27017/superData'
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password

      runs-on: ubuntu-latest

      steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      
      #- name: Setup NodeJS Version
      #  uses: actions/setup-node@v3
       # with:
       #   node-version: 18
      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
      - name: Install Dependecies 
        run: npm install
      
      - name: Check Code Coverage
        continue-on-error: true
        run: npm run coverage
      
      - name: Archive Test Result
        uses: actions/upload-artifact@v3
        with:
          name: Code-Coverage-Result
          path: coverage
          
          retention-days: 5 
      - name: Convert Coverage Report to lcov format
        run: ./node_modules/.bin/nyc report --reporter=lcov
      - name: Run SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    docker:
      needs: [unit-testing, code-coverage,code-analysis]
      runs-on: ubuntu-latest

      steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: DockerHub Login
        uses: docker/login-action@v2.0.0
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: GHCR Login
        uses: docker/login-action@v2.2.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Build For Testing
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

      
      - name: Docker Image Testing
        run: |
          docker images
          docker run --name solar-system-app -d \
            -p 3000:3000 \
            -e MONGO_URI=$MONGO_URI \
            -e MONGO_USERNAME=$MONGO_USERNAME \
            -e MONGO_PASSWORD=$MONGO_PASSWORD \
            ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

          export IP=$(docker inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}" solar-system-app)
          echo $IP

          echo Testing Image URL using wget
          wget -q -O - 127.0.0.1:3000/live | grep live

      - name: Container Registry push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}
         
            
#    dev-deploy:
#      needs: docker
 #     runs-on: ubuntu-latest
#
 #     steps:
  #      - name: Checkout Repo
   #       uses: actions/checkout@v4
    #    - name: Install kubectl CLI
     #     uses: azure/setup-kubectl@v3
      #    with:
       #     version: 'v1.26.0'
            
        #- name: Set kubeconfig file
          #uses: azure/k8s-set-context@v3
         # with:
           # method: kubeconfig
            #kubeconfig: ${{ secrets.KUBECONFIG }}
          

        #- name: Fetch Kubernetes Cluster Details
         # run: |
          #  kubectl version --short
            #echo -----------------------------------------
           # kubectl get nodes

